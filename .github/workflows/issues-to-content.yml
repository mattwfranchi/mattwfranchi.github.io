name: Convert Issues to Content

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  actions: write
  pages: write

jobs:
  convert-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Issue Event
        run: |
          echo "Issue labels: ${{ toJson(github.event.issue.labels) }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Event action: ${{ github.event.action }}"
          
      - name: Check if content issue
        id: check
        run: |
          labels='${{ toJson(github.event.issue.labels.*.name) }}'
          echo "Labels array: $labels"
          
          if echo "$labels" | grep -q '"snip"'; then
            echo "is_content=true" >> $GITHUB_OUTPUT
            echo "content_type=snips" >> $GITHUB_OUTPUT
          elif echo "$labels" | grep -q '"playlist"'; then
            echo "is_content=true" >> $GITHUB_OUTPUT
            echo "content_type=playlists" >> $GITHUB_OUTPUT
          elif echo "$labels" | grep -q '"album"'; then
            echo "is_content=true" >> $GITHUB_OUTPUT
            echo "content_type=photos" >> $GITHUB_OUTPUT
          else
            echo "is_content=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check.outputs.is_content == 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert Issue to Content
        if: steps.check.outputs.is_content == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get issue details
            const issue = context.payload.issue;
            let title = issue.title;
            const body = issue.body || '';
            const labels = issue.labels.map(label => label.name);
            
            // Debug: log the issue body
            console.log('Raw issue body:', JSON.stringify(body));
            console.log('Body length:', body.length);
            
            // Clean up title (remove prefixes like [SNIP], [PLAYLIST], [ALBUM])
            title = title.replace(/^\[.*?\]\s*/, '').trim();
            
            // Get content type from previous step
            const contentType = '${{ steps.check.outputs.content_type }}';
            console.log(`Processing ${contentType} content`);
            
            // Parse structured content from issue body
            let actualContent = body;
            let extractedSource = "GitHub Issue";
            let extractedTags = [];
            let extractedDescription = title;
            
            if (contentType === 'snips') {
              // Parse snip-specific fields from issue body
              const sourceMatch = body.match(/### Source[\s\S]*?\n\n(.*?)(?:\n\n### |$)/s);
              const tagsMatch = body.match(/### Tags[\s\S]*?\n\n(.*?)(?:\n\n### |$)/s);
              
              if (sourceMatch && sourceMatch[1].trim()) {
                extractedSource = sourceMatch[1].trim();
              }
              
              if (tagsMatch && tagsMatch[1].trim()) {
                extractedTags = tagsMatch[1].split(/[,\s]+/).map(tag => tag.trim()).filter(tag => tag);
              }
              
              // Extract the main content (everything before the first ### section)
              const contentMatch = body.match(/^([\s\S]*?)(?:\n\n### |$)/);
              if (contentMatch) {
                actualContent = contentMatch[1].trim();
              }
            } else {
              // For other content types, clean up body content
              actualContent = body
                .replace(/### Content[\s\S]*?\n\n/, '') // Remove "### Content" header if present
                .replace(/^<!--[\s\S]*?-->\s*/, '') // Remove HTML comments at start
                .replace(/<!--[\s\S]*?-->/g, '') // Remove all HTML comments
                .trim();
            }
            
            // Clean up body content (remove form template artifacts)
            actualContent = actualContent
              .replace(/^<!--[\s\S]*?-->\s*/, '') // Remove HTML comments at start
              .replace(/<!--[\s\S]*?-->/g, '') // Remove all HTML comments
              .trim();
            
            console.log('Extracted content:', JSON.stringify(actualContent));
            console.log('Extracted source:', extractedSource);
            console.log('Extracted tags:', extractedTags);
            
            // Create slug from title
            const slug = title.toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .trim();
            
            // Create frontmatter
            const now = new Date().toISOString();
            let frontmatter = `---\ntitle: "${title}"\npubDatetime: ${now}\nfeatured: false\ndraft: false\n`;

            // Add content-specific fields
            if (contentType === 'snips') {
              frontmatter += `description: "${extractedDescription}"\n`;
              frontmatter += `source: "${extractedSource}"\n`;
              frontmatter += `sourceUrl: "${issue.html_url}"\n`;
              frontmatter += `tags: [${extractedTags.map(tag => `"${tag}"`).join(', ')}]\n`;
            } else if (contentType === 'playlists') {
              frontmatter += `description: "${actualContent.split('\n')[0] || title}"\nplatform: "spotify"\nplaylistUrl: ""\nplaylistId: ""\nmood: []\ntags: []\n`;
            } else if (contentType === 'photos') {
              frontmatter += `description: "${actualContent.split('\n')[0] || title}"\nalbumArt: ""\ntags: []\n`;
            }
            
            // Close frontmatter and add body content
            frontmatter += `---\n\n${actualContent}`;

             // Create file path
             const fileName = `${slug}.md`;
             let filePath;
             
             if (contentType === 'photos') {
               // For albums, create a directory and handle image attachments
               const albumDir = `src/content/photos/${slug}`;
               filePath = `${albumDir}/${fileName}`;
               
               // Create album directory
               await fs.promises.mkdir(albumDir, {recursive: true});
               
               // Process any image attachments from the issue
               const imageRegex = /!\[.*?\]\((https:\/\/github\.com\/.*?\/assets\/.*?)\)/g;
               const imageMatches = [...cleanBody.matchAll(imageRegex)];
               
               if (imageMatches.length > 0) {
                 console.log(`Found ${imageMatches.length} image(s) in issue`);
                 
                 for (let i = 0; i < imageMatches.length; i++) {
                   const imageUrl = imageMatches[i][1];
                   const imageExt = imageUrl.split('.').pop() || 'jpg';
                   const imageName = `${slug}-${i + 1}.${imageExt}`;
                   const imagePath = `${albumDir}/${imageName}`;
                   
                   try {
                     // Download the image
                     const imageResponse = await fetch(imageUrl);
                     if (imageResponse.ok) {
                       const imageBuffer = await imageResponse.arrayBuffer();
                       await fs.promises.writeFile(imagePath, Buffer.from(imageBuffer));
                       
                       // Create a markdown file for this photo
                       const photoFrontmatter = `---\nalbumId: "${slug}"\ntitle: "${title} - Photo ${i + 1}"\nphoto: "./${imageName}"\ncaption: ""\norder: ${i + 1}\npubDatetime: ${now}\n---\n\n`;
                       const photoMarkdownPath = `${albumDir}/${slug}-${i + 1}.md`;
                       await fs.promises.writeFile(photoMarkdownPath, photoFrontmatter);
                       
                       console.log(`Downloaded and created photo: ${imageName}`);
                     }
                   } catch (error) {
                     console.error(`Failed to download image ${imageUrl}:`, error);
                   }
                 }
               }
             } else {
               // For other content types, use standard path
               filePath = `src/content/${contentType}/${fileName}`;
               await fs.promises.mkdir(path.dirname(filePath), {recursive: true});
             }
             
             // Write the main content file
             await fs.promises.writeFile(filePath, frontmatter);
            
                         // Commit files
             const { execSync } = require('child_process');
             execSync('git config user.name "GitHub Action"');
             execSync('git config user.email "action@github.com"');
             
             if (contentType === 'photos') {
               // For albums, add the entire directory
               execSync(`git add "src/content/photos/${slug}/"`);
               execSync(`git commit -m "Add album: ${title} with photos (from issue #${issue.number})"`);
             } else {
               // For other content, add the single file
               execSync(`git add "${filePath}"`);
               execSync(`git commit -m "Add ${contentType.slice(0, -1)}: ${title} (from issue #${issue.number})"`);
             }
             
                          execSync('git push');
             
             // Trigger site rebuild
             console.log('Triggering site rebuild...');
             await github.rest.actions.createWorkflowDispatch({
               owner: context.repo.owner,
               repo: context.repo.repo,
               workflow_id: 'deploy.yml', // or 'astro.yml' or whatever your build workflow is called
               ref: 'main'
             }).catch(async (error) => {
               console.warn('Failed to trigger deploy.yml, trying pages-build-deployment...');
               // Fallback: trigger Pages rebuild via API
               try {
                 await github.rest.pages.requestPagesBuild({
                   owner: context.repo.owner,
                   repo: context.repo.repo
                 });
                 console.log('Triggered Pages rebuild successfully');
               } catch (pagesError) {
                 console.error('Failed to trigger Pages rebuild:', pagesError);
               }
             });
             
             // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
                         // Add comment
             const itemType = contentType === 'photos' ? 'album' : contentType.slice(0, -1);
             await github.rest.issues.createComment({
               owner: context.repo.owner,
               repo: context.repo.repo,
               issue_number: issue.number,
               body: `✅ Created ${itemType}: \`${filePath}\``
             }); 